#include "adp/adp_base.h"
#include "adp/adp_topos.h"
#include "pkg/pkg_api.h"
#include "log.h"

EXEC SQL include sqlca;

int GetPinKey(char *opczKey, const char *epczMerchantId,  const char *epczTermId )
{
   EXEC SQL BEGIN DECLARE SECTION;
       char aczPinKey[33];
       char aczTerminalId[100];
       char aczMerchantId[100];
       short shInd;
   EXEC SQL END   DECLARE SECTION;

   memset( aczPinKey, 0x00, sizeof(aczPinKey) );
   memset( aczMerchantId, 0x00, sizeof(aczMerchantId) );
   memset( aczTerminalId, 0x00, sizeof(aczTerminalId) );

   strcpy( aczMerchantId, epczMerchantId );
   strcpy( aczTerminalId, epczTermId );

   EXEC SQL SELECT pinkey into :aczPinKey :shInd 
            FROM Svc_Terminal 
            WHERE code=:aczTerminalId and merchant_code=:aczMerchantId;

   if (SQLCODE)
   {
       LOG4C(( LOG_FATAL, "KEY计算MAC错误 数据库错误,SQLCODE=[%d][%s][%s]", 
                           SQLCODE, aczTerminalId, aczMerchantId ));
       return -1;
   }

   DecryptKey( opczKey, aczPinKey );
   DecryptKey( opczKey+8, aczPinKey+16 );

   return 0;
}

int GetMacKey( char *opczKey, const char *epczTermId, const char *epczMerchantId)
{
   EXEC SQL BEGIN DECLARE SECTION;
       char aczMacKey[33];
       char aczTerminalId[100];
       char aczMerchantId[100];
       short  shInd;
   EXEC SQL END   DECLARE SECTION;

   if( opczKey == NULL )
   {
       LOG4C(( LOG_FATAL, "KEY计算输入参数为空" ));
       return -1;
   }

   memset( aczMacKey, 0x00, sizeof(aczMacKey) );
   memset( aczMerchantId, 0x00, sizeof(aczMerchantId) );
   memset( aczTerminalId, 0x00, sizeof(aczTerminalId) );

   strcpy( aczMerchantId, epczMerchantId );
   strcpy( aczTerminalId, epczTermId );

   EXEC SQL SELECT  mackey into :aczMacKey :shInd  
            FROM Svc_Terminal 
            WHERE code=:aczTerminalId and merchant_code=:aczMerchantId;

   if (SQLCODE)
   {
       LOG4C(( LOG_FATAL, "KEY计算MAC错误 数据库错误,SQLCODE=[%d][%s][%s]", 
                           SQLCODE, aczTerminalId, aczMerchantId ));
       return -1;
   }

   DecryptKey( opczKey, aczMacKey );
   DecryptKey( opczKey+8, aczMacKey+16 );

   return 0;
}

int CheckMac(char * epczBuf, int enLen, const char *epczTermId, const char *epczMerchantId )
{
   unsigned char aczBuf[17];
   unsigned char aczKey[17];
   unsigned char aczMac[9];
   int  i=0;

   memset( aczBuf, 0, sizeof(aczBuf) );
   memset( aczKey, 0, sizeof(aczKey) );
   memset( aczMac, 0, sizeof(aczMac) );

   if ( GetMacKey( aczKey, epczTermId, epczMerchantId ) != 0 )
   {
       LOG4C(( LOG_FATAL, "GET MAC KEY FAIL" ));
       return -1;
   }
   for (i=0; i<enLen; i++)
      aczBuf[i&7] ^= epczBuf[i];

   mydes3( aczBuf, aczMac, aczKey, 0 ); 

   if( memcmp( aczMac, epczBuf+enLen, 8 ) != 0 )
   {
       memcpy( aczBuf, epczBuf+enLen, 8 );
       LOG4C(( LOG_FATAL, "CHECK MAC FAIL" ));
       LOG4C(( LOG_FATAL, "aczMac[%02x%02x%02x%02x%02x%02x%02x%02x]", aczMac[0], aczMac[1],
                           aczMac[2],aczMac[3],aczMac[4],aczMac[5],aczMac[6],aczMac[7] ));
       LOG4C(( LOG_FATAL, "BUF[%02x%02x%02x%02x%02x%02x%02x%02x]", aczBuf[0], aczBuf[1],
                           aczBuf[2],aczBuf[3],aczBuf[4],aczBuf[5],aczBuf[6],aczBuf[7] ));
       return -1;
   }
   return 0;
}

int GenMac( char * epczBuf, int enLen, const char *epczTermId, const char *epczMerchantId)
{
   unsigned char aczBuf[17];
   unsigned char aczKey[17];
   unsigned char aczMac[9];
   int  i=0;

   memset( aczBuf, 0, sizeof(aczBuf) );
   memset( aczKey, 0, sizeof(aczKey) );
   memset( aczMac, 0, sizeof(aczMac) );

   if ( GetMacKey( aczKey, epczTermId, epczMerchantId ) != 0 )
   {
       LOG4C(( LOG_FATAL, "GET MAC KEY FAIL" ));
       return -1;
   }

   for (i=0; i<enLen; i++)
      aczBuf[i&7] ^= epczBuf[i];

/*
   LOG4C((LOG_DEBUG, "GenMac[%02x][%02x][%02x][%02x][%02x][%02x][%02x][%02x]",
               aczBuf[0]&0xff,aczBuf[1]&0xff,aczBuf[2]&0xff,aczBuf[3]&0xff,
               aczBuf[4]&0xff,aczBuf[5]&0xff,aczBuf[6]&0xff,aczBuf[7]&0xff));
   LOG4C((LOG_DEBUG, "aczKey[%02x][%02x][%02x][%02x][%02x][%02x][%02x][%02x]",
               aczKey[0]&0xff,aczKey[1]&0xff,aczKey[2]&0xff,aczKey[3]&0xff,
               aczKey[4]&0xff,aczKey[5]&0xff,aczKey[6]&0xff,aczKey[7]&0xff));
*/
   mydes3( aczBuf, aczMac, aczKey, 0 ); 

/*
   LOG4C((LOG_DEBUG, "aczMac[%02x][%02x][%02x][%02x][%02x][%02x][%02x][%02x]",
               aczMac[0]&0xff,aczMac[1]&0xff,aczMac[2]&0xff,aczMac[3]&0xff,
               aczMac[4]&0xff,aczMac[5]&0xff,aczMac[6]&0xff,aczMac[7]&0xff));
*/
   memcpy( epczBuf+enLen, aczMac, 8 );
   return 0;
}

/*
**说明:本函数用于往柜台渠道发正确响应
**渠道返回适配器基本步骤:
**
**1 准备打包需要的数据,包含打包的函数ID,配置的交易代码等信息,
**  一般调用 ADP_GetChanPkgNeedInfo
**
**2 根据交易代码和报文标志查找该交易的报文字段配置信息,
**  一般调用 PKG_GetInfoByTranCode
**
**3 调用打包函数打包
**  一般调用 PKG_ToMsg
**
**4 调用渠道返回函数, 将数据返回到渠道
**  一般调用 COM_SendBuffer
*/
int  ADP_ToPos( int eiSubID,    int eiSubSeq,
                       UDP epfReqList, UDP opfRspList,
                       SVC_Content   * epstService )
{
   char aczSendBuf[5000];
   int iRet, iLstId, iSendLen;
   PkgNeedInfo stPkgNeedInfo;
   MsgFldCfgAry stMsgFldCfgAry;
   SUB_SvcList *pstSubSvcCfg;
   char aczHostNodeId[10];
   char *pTmp1, *pTmp2;
   int iAsmRetCodeFlag=0;
   int iChanNodeId;
   int iToMidTranCodeId, iToMsgTranCodeId, iToMidId, iToMsgId;
   unsigned char aczBitMap[17];
   char aczTerminalId[10];
   char aczMerchantId[20];

   iChanNodeId = epstService->iChannelId;

   iLstId = epstService->pstSubSvcCurr->iLstId;
   /*iLstId =2;*/
   pstSubSvcCfg = epstService->pstSubSvcCurr;

   iRet = ADP_GetChanPkgNeedInfo(epstService->iSvcId, eiSubID, &stPkgNeedInfo);
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage,
               "%d in %s get the package need information error %d",
               __LINE__, __FILE__, iRet );
      LOG4C(( LOG_FATAL, "get the package need information error %d", iRet ));
      return ADP_GPNI_ERR;
   }
   memset( &stMsgFldCfgAry, 0x00, sizeof(stMsgFldCfgAry) );
   iRet = PKG_GetInfoByTranCode( epstService->iChannelId, 
                                 stPkgNeedInfo.aczTranCode, iLstId,
                                 &stMsgFldCfgAry );
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage,
               "取报文%d域配置出错",
               stPkgNeedInfo.iPkgAppId );
      LOG4C(( LOG_FATAL, epstService->aczErrorMessage ));

      return ADP_GIFMFC_ERR;
   }

   iRet = PKG_GetFunId( iChanNodeId, &iToMidTranCodeId, &iToMsgTranCodeId,
                        &iToMidId, &iToMsgId );
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage, "%d取报文组包函数域配置出错", iChanNodeId );
      LOG4C(( LOG_FATAL, epstService->aczErrorMessage ));
      return ADP_GIFMFC_ERR;
   }

   memset( aczTerminalId, 0, sizeof(aczTerminalId) );
   memset( aczMerchantId, 0, sizeof(aczMerchantId) );
   UDO_GetField( epfReqList, 41, 0, aczTerminalId, 0 );
   UDO_GetField( epfReqList, 42, 0, aczMerchantId, 0 );
   LOG4C(( LOG_DEBUG, "TERMID[%s][%s]", aczTerminalId, aczMerchantId ));

   memset( aczSendBuf, 0, sizeof(aczSendBuf) );
   iRet = PKG_ToMsg( iToMsgId, aczSendBuf, &iSendLen,
                     stPkgNeedInfo.iNodeId, stPkgNeedInfo.aczTranCode,
                     iLstId, &stMsgFldCfgAry, epfReqList );
   free( stMsgFldCfgAry.pstMsgFldCfg );
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage,
               "%d in %s子服务%d打包出错,交易代码%s,返回%d",
               __LINE__, __FILE__, eiSubID, stPkgNeedInfo.aczTranCode, iRet );
      LOG4C(( LOG_FATAL, epstService->aczErrorMessage ));

      return ADP_PKGTOMSG_ERR;
   }
   
   memset( aczBitMap, 0, sizeof(aczBitMap) );
   UDO_GetField( epfReqList, 1, 0, aczBitMap, 0 );

   LOG4C(( LOG_DEBUG,"BITMAP [%02X %02X %02X %02X %02X %02X %02X %02X]",
               aczBitMap[0]&0xff, aczBitMap[1]&0xff, aczBitMap[2]&0xff,aczBitMap[3]&0xff,
               aczBitMap[4]&0xff, aczBitMap[5]&0xff, aczBitMap[6]&0xff,aczBitMap[7]&0xff ));
   
   if( aczBitMap[7] & 0x01 )
   {
       GenMac( aczSendBuf+6, iSendLen-6-8, aczTerminalId, aczMerchantId );
   }

   if( sendBuffer( aczSendBuf, iSendLen ) == -1 )
   {
      LOG4C(( LOG_FATAL, "往渠道返回信息出错%s", strerror(errno) ));
      return -1;
   }

   return 0;
}

