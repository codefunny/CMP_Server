#include "adp/adp_base.h"
#include "pkg/pkg_api.h"
#include "adp/adp_tomiteno.h"
#include "log.h"

EXEC SQL include sqlca;

int GetMitenoMacKey( char *opczKey, const char *epczTermId, const char *epczMerchantId)
{
   EXEC SQL BEGIN DECLARE SECTION;
       char aczMacKey[33];
       char aczTerminalId[100];
       char aczMerchantId[100];
       short  shInd;
   EXEC SQL END   DECLARE SECTION;

   if( opczKey == NULL )
   {
       LOG4C(( LOG_FATAL, "KEY计算输入参数为空" ));
       return -1;
   }

   memset( aczMacKey, 0x00, sizeof(aczMacKey) );
   memset( aczMerchantId, 0x00, sizeof(aczMerchantId) );
   memset( aczTerminalId, 0x00, sizeof(aczTerminalId) );

   strcpy( aczMerchantId, epczMerchantId );
   strcpy( aczTerminalId, epczTermId );

   EXEC SQL SELECT  mackey into :aczMacKey :shInd  
            FROM Svc_Miteno_Terminal 
            WHERE code=:aczTerminalId and merchant_code=:aczMerchantId;

   if (SQLCODE)
   {
       LOG4C(( LOG_FATAL, "KEY计算MAC错误 数据库错误,SQLCODE=[%d][%s][%s]", 
                           SQLCODE, aczTerminalId, aczMerchantId ));
       return -1;
   }

   DecryptKey( opczKey, aczMacKey );
   DecryptKey( opczKey+8, aczMacKey+16 );

   return 0;
}



#define _PACK_MAC_ADD_VALUE_(epfReqList,eiFieldId, MACBUF, MACLen)\
{\
	char szTmp[100+1]; \
	int nLen=0; \
	memset(szTmp, 0, sizeof(szTmp)); \
    UDO_GetField( epfReqList, eiFieldId, 0, szTmp, &nLen );	\
    if(nLen > 0) \
    { \
    	memcpy(MACBUF+MACLen, szTmp, nLen); \
    	MACLen += nLen; \
    } \
}   

/*获取计算MAC数据*/
int GetMitenoMacBuf(UDP epfReqList, char *pszOutSrc, int *pnLen)
{	
	char szMacBuffer[1024+1];
	int nMacLen=0;
	
	memset(szMacBuffer, 0, sizeof(szMacBuffer));
	nMacLen = 0;


    _PACK_MAC_ADD_VALUE_(epfReqList, TRANSTYPE, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, TXDATE, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, TXTIME, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, TRACENO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, BATCHNO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, TERMINALID, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, MERCHANTNO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, REFNO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, ACCNO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, PHONENO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, COUPONNO, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, RESPCODE, szMacBuffer, nMacLen);
    _PACK_MAC_ADD_VALUE_(epfReqList, AMOUNT, szMacBuffer, nMacLen);

	memcpy(pszOutSrc, szMacBuffer, nMacLen);
	*pnLen = nMacLen;
	return 0;
	
}




/*计算MAC*/
int GenMitenoMac(UDP epfReqList, int eiFieldId, const char *epczTermId, const char *epczMerchantId)
{
	char szMacBuffer[1024+1];
	int nMacLen=0;
	char aczMacKey[32+1];	
    char *p=NULL;
	char aczMac[16+1];

	memset(szMacBuffer, 0, sizeof(szMacBuffer));
	nMacLen = 0;

	if ( GetMitenoMacKey( aczMacKey, epczTermId, epczMerchantId ) != 0 )
	{
		LOG4C(( LOG_FATAL, "GET MAC KEY FAIL" ));
		return -1;
	}


	GetMitenoMacBuf(epfReqList, szMacBuffer, &nMacLen);
	
	memset(aczMac, 0, sizeof(aczMac));
	CalcMAC_X919(aczMac, szMacBuffer, nMacLen, aczMacKey);

	UDO_ACField(epfReqList, eiFieldId, UDT_BIN, aczMac, 8);
	
	return 0;
}


int CheckMitenoMac(UDP epfReqList,const char *pszInputMac,  const char *epczTermId, const char *epczMerchantId )
{
	char aczMacKey[32+1];	
	char szMacBuffer[1024+1];
	int nMacLen=0;
	char aczMac[16+1];

	memset(aczMacKey, 0, sizeof(aczMacKey));
   if( GetMitenoMacKey( aczMacKey, epczTermId, epczMerchantId ) != 0 )
   {
	   LOG4C(( LOG_FATAL, "GET MAC KEY FAIL" ));
	   return -1;
   }
   
   GetMitenoMacBuf(epfReqList, szMacBuffer, &nMacLen);
   memset(aczMac, 0, sizeof(aczMac));
   CalcMAC_X919(aczMac, szMacBuffer, nMacLen, aczMacKey);
   if( memcmp( pszInputMac, aczMac, 8 ) != 0 )
   {
       LOG4C(( LOG_FATAL, "CHECK MAC FAIL" ));
       return -1;
   }
   return 0;
}



/*
**说明:本函数用于往柜台渠道发正确响应
**渠道返回适配器基本步骤:
**
**1 准备打包需要的数据,包含打包的函数ID,配置的交易代码等信息,
**  一般调用 ADP_GetChanPkgNeedInfo
**
**2 根据交易代码和报文标志查找该交易的报文字段配置信息,
**  一般调用 PKG_GetInfoByTranCode
**
**3 调用打包函数打包
**  一般调用 PKG_ToMsg
**
**4 调用渠道返回函数, 将数据返回到渠道
**  一般调用 COM_SendBuffer
*/
int  ADP_ToMitenoPos( int eiSubID,    int eiSubSeq,
                       UDP epfReqList, UDP opfRspList,
                       SVC_Content   * epstService )
{
   char aczSendBuf[5000];
   int iRet, iLstId, iSendLen;
   PkgNeedInfo stPkgNeedInfo;
   MsgFldCfgAry stMsgFldCfgAry;
   SUB_SvcList *pstSubSvcCfg;
   char aczHostNodeId[10];
   char *pTmp1, *pTmp2;
   int iAsmRetCodeFlag=0;
   int iChanNodeId;
   int iToMidTranCodeId, iToMsgTranCodeId, iToMidId, iToMsgId;
   char aczTerminalId[10];
   char aczMerchantId[20];
   char aczMac[20];
   

   iChanNodeId = epstService->iChannelId;

   iLstId = epstService->pstSubSvcCurr->iLstId;
   /*iLstId =2;*/
   pstSubSvcCfg = epstService->pstSubSvcCurr;

   iRet = ADP_GetChanPkgNeedInfo(epstService->iSvcId, eiSubID, &stPkgNeedInfo);
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage,
               "%d in %s get the package need information error %d",
               __LINE__, __FILE__, iRet );
      LOG4C(( LOG_FATAL, "get the package need information error %d", iRet ));
      return ADP_GPNI_ERR;
   }
   memset( &stMsgFldCfgAry, 0x00, sizeof(stMsgFldCfgAry) );
   iRet = PKG_GetInfoByTranCode( epstService->iChannelId, 
                                 stPkgNeedInfo.aczTranCode, iLstId,
                                 &stMsgFldCfgAry );
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage,
               "取报文%d域配置出错",
               stPkgNeedInfo.iPkgAppId );
      LOG4C(( LOG_FATAL, epstService->aczErrorMessage ));

      return ADP_GIFMFC_ERR;
   }

   iRet = PKG_GetFunId( iChanNodeId, &iToMidTranCodeId, &iToMsgTranCodeId,
                        &iToMidId, &iToMsgId );
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage, "%d取报文组包函数域配置出错", iChanNodeId );
      LOG4C(( LOG_FATAL, epstService->aczErrorMessage ));
      return ADP_GIFMFC_ERR;
   }

   memset( aczTerminalId, 0, sizeof(aczTerminalId) );
   memset( aczMerchantId, 0, sizeof(aczMerchantId) );
   UDO_GetField( epfReqList, TERMINALID, 0, aczTerminalId, 0 );
   UDO_GetField( epfReqList, MERCHANTNO, 0, aczMerchantId, 0 );
   LOG4C(( LOG_DEBUG, "TERMID[%s][%s]", aczTerminalId, aczMerchantId ));


   /*判断是否需要计算MAC*/
   iRet = UDO_GetField( epfReqList, MAC, 0, aczMac, 0 );
   if(iRet == 0)
   {	
		GenMitenoMac(epfReqList, MAC, aczTerminalId, aczMerchantId);
   }
   

   memset( aczSendBuf, 0, sizeof(aczSendBuf) );
   iRet = PKG_ToMsg( iToMsgId, aczSendBuf, &iSendLen,
                     stPkgNeedInfo.iNodeId, stPkgNeedInfo.aczTranCode,
                     iLstId, &stMsgFldCfgAry, epfReqList );
   free( stMsgFldCfgAry.pstMsgFldCfg );
   if( iRet != 0 )
   {
      sprintf( epstService->aczErrorMessage,
               "%d in %s子服务%d打包出错,交易代码%s,返回%d",
               __LINE__, __FILE__, eiSubID, stPkgNeedInfo.aczTranCode, iRet );
      LOG4C(( LOG_FATAL, epstService->aczErrorMessage ));

      return ADP_PKGTOMSG_ERR;
   }

   if( sendBuffer( aczSendBuf, iSendLen ) == -1 )
   {
      LOG4C(( LOG_FATAL, "往渠道返回信息出错%s", strerror(errno) ));
      return -1;
   }

   return 0;
}

