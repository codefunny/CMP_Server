#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "apr_network_io.h"
#include "ap_global.h"
#include "udo.h"
#include "log.h"
#include "tool_base.h"
#include "ap_base.h"
#include "pub_base.h"
#include "ap_handle.h"
#include "adp/adp_tomiteno.h"


#ifdef __cplusplus
extern "C"
{
#endif

extern int DataBaseConnect(void);

#ifdef __cplusplus
}
#endif

/**
  * 以下函数执行顺序和大致关系如下
  * main
  * BEGIN main
  *    onSysStart( argv[0] );
  *
  *    while( doBusiness )
  *    BEGIN while
  *       acceptClientConnect;//等待客户端连接
  *       recvBuffer          //从客户端接收数据
  *       preCheck            //对接收的数据做预检查
  *       onTxStart           //交易开始
  *       unPack              //拆包
  *       postCheck           //拆包后预处理
  *       doTrans             //根据配置信息执行交易,在适配器中调用sendBuffer
  *       onTxEnd             //交易结束
  *    END while
  *
  *    onSysEnd
  * END main
  */

int onSysStart( char *pczLogicName )
{
   int iRet;

   if( iRet = DataBaseConnect() )
   {
      printf( "connect to database server error, SQLCODE = [%d]\n", iRet );
      LOG4C (( LOG_FATAL, "connect to database server error, SQLCODE = [%d]", iRet ));
      return -1;
   }
   DataBaseDisConnect();

   return 0;
}

int onSysEnd( void )
{
   //return DataBaseDisConnect();
   return 0;
}

/* 该全局变量在日志函数中使用，不能去除 */
extern char *pczExecFileName;
extern TOOL_LogInfo stToolLogInfo;
extern apr_pool_t *gpstLocalPool;

int onTxStart( char *pczLogicName )
{
   char aczTxSerial[20], aczTxDate[9];
   long lSerial = 0;
   int iRet;
   char  aczDayEnd[10];

   /* 请不要删除 globalInit函数, 必须在第一行 */
   globalInit();

   memset( aczTxSerial, 0, sizeof(aczTxSerial) );
   memset( aczTxDate, 0, sizeof(aczTxDate) );

   if( iRet = DataBaseConnect() )
   {
      printf( "connect to database server error, SQLCODE = [%d]\n", iRet );
      LOG4C (( LOG_FATAL, "connect to database server error, SQLCODE = [%d]", iRet ));
      return -1;
   }

   iRet= getPtSerialDate( &lSerial, aczTxDate );
   if( iRet != 0 )
   {
       LOG4C(( LOG_DEBUG, "数据库连接出错[%d],准备重新连接", iRet ));
       return -1;
   }

   memset( aczDayEnd, 0, sizeof(aczDayEnd) );
   aczDayEnd[0]='0';
   if( (char *)getenv("IS_DAY_CUT") != NULL )
   {
       strcpy( aczDayEnd, getenv("IS_DAY_CUT") );
   }
   
   if( aczDayEnd[0]=='0')
   {
      TOOL_GetSystemYYYYMMDD( aczTxDate );
   }

   LOG4C(( LOG_DEBUG, "流水 [%d] 日期 [%s] \n", lSerial, aczTxDate ));
   sprintf( aczTxSerial, "%d", lSerial );

   /* 然后可调用 addXXX 函数, 在CMP运行过程中可调用 getXXX 函数 */
   /* 如数据字典编号, 在此用 addInt( "dictid", 12 )             */
   /* 在系统运行时候可调用 getInt( "dictid", &iDictId )取值     */
   addString( "execfile", pczLogicName );
   addString( "agserial", aczTxSerial );
   addString( "agtxdate", aczTxDate );

   return 0;
}

int onTxEnd( void )
{
   return DataBaseDisConnect();
}

int preCheck( char *pczBuffer, int iLen )
{
   return 0;
}

int postCheck( UDP pUdo , char *pczBuffer, int iLen )
{
	char aczMac[50+1];
	int iRet=0;
	char  aczTermId[10];
	char  aczMerchantId[20];

    memset( aczTermId, 0, sizeof(aczTermId) );
    memset( aczMerchantId, 0, sizeof(aczMerchantId) );

	UDO_GetField( pUdo, TERMINALID, 0, aczTermId, 0 );
	UDO_GetField( pUdo, MERCHANTNO, 0, aczMerchantId, 0 );
	
	addString( "merchantid", aczMerchantId );
	addString( "terminalid", aczTermId );
	
 	memset(aczMac, 0, sizeof(aczMac));
 	/*判断是否需要计算MAC*/
 	iRet = UDO_GetField( pUdo, MAC, 0, aczMac, 0 );	
 	if(iRet == 0)
	{
	   if(CheckMitenoMac(pUdo,aczMac, aczTermId, aczMerchantId) != 0)
	   {
	   		return -1;
	   }
    }
   return 0;
}

/**
  * to access the pczExecFileName in the adaptor
  * declare it as static
  */
static char aczLogFileName[128];

int getTxCodeByLen( char *pczBuffer, int nBufferLen, char *pczTxCode )
{

   char aczExecFile[64];
   char szTmp[100];
   int nTlvValueLen=0;
   int nRet;

   strcpy( pczTxCode, "109999" );
	
   /**/
   memset(szTmp, 0, sizeof(szTmp));
   nRet = TlvGetValue(TRANSTYPE, szTmp, &nTlvValueLen, pczBuffer+8, nBufferLen-8);

   if(nRet == 0)
   {
   		switch(atoi(szTmp))
   		{
   			case 100001:	//签到
				strcpy( pczTxCode, "109001" );
				break;
		   	case 200003:	//KEK
				strcpy( pczTxCode, "109002" );
				break;			
		    case 200002:	//参数下载
				strcpy( pczTxCode, "109003" );
				break;
		   	case 100002:	//券查询
				strcpy( pczTxCode, "109004" );
				break;
		    case 100003:	//手机号可用券查询
				strcpy( pczTxCode, "109005" );
				break;
			case 100005:	//串码验券
				strcpy( pczTxCode, "109006" );
				break;
		    case 100004:	//手机号验券
				strcpy( pczTxCode, "109007" );
				break;
			case 100010:	//撤销
				strcpy( pczTxCode, "109008" );
				break;
		    case 100011:	//退货
				strcpy( pczTxCode, "109009" );
				break;
		    case 400012:	//冲正
				strcpy( pczTxCode, "109010" );
				break;
			case 200001:	//结算
				strcpy( pczTxCode, "109011" );
				break;
			case 100006:	//银行卡可用券查询
				strcpy( pczTxCode, "109012" );
				break;
			case 100007:	//银行卡验券
				strcpy( pczTxCode, "109013" );
				break;
			case 100008:	//微信预支付
				strcpy( pczTxCode, "109014" );
				break;
			case 100009:	//微信订单查询
				strcpy( pczTxCode, "109015" );
				break;
			case 100012:	//微信扫码支付
				strcpy( pczTxCode, "109016" );
				break;
			case 100013:	//微信退货
				strcpy( pczTxCode, "109017" );
				break;
			case 100021:	//百度扫码支付
				strcpy( pczTxCode, "109018" );
				break;
			case 100022:	//百度订单查询
				strcpy( pczTxCode, "109019" );
				break;
			case 100024:	//百度退货
				strcpy( pczTxCode, "109020" );
				break;
			case 100031:	//京东扫码支付
				strcpy( pczTxCode, "109021" );
				break;
			case 100032:	//京东查询
				strcpy( pczTxCode, "109022" );
				break;
			case 100033:	//京东退货
				strcpy( pczTxCode, "109023" );
				break;
   		}
   }
	
   pczTxCode[6]=0;

   memset( aczExecFile, 0, sizeof(aczExecFile) );
   getString( "execfile", aczExecFile );
   addString( "txcode", pczTxCode );

   LOG4C(( LOG_DEBUG, "交易代码 [%s] 可执行程序名 [%s]\n", pczTxCode, aczExecFile ));

   /** 请不要在其它任何地方修改 pczExecFileName **/
   pczExecFileName = aczLogFileName;
   sprintf( pczExecFileName, "%s/%s", aczExecFile, pczTxCode );
   sprintf( stToolLogInfo.aczFileName, "%s/%s/cmp_run.log", getenv( "TRACE_PATH" ), pczExecFileName );
   return 0;
}


/**
  * 以下函数属于通讯
  */
extern apr_socket_t *pstClient;

/**
  * pczBuffer 是用于保存接收内容, 缓冲区初始长度保存在 *ptLen 中
  * 如果改长度不够, 则需要在 recvBuffer 函数中重新分配
  * 分配必须使用 apr_palloc 函数, 第一个参数必需是 gpstLocalPool
  * 系统会自动回收通过 apr_palloc 分配的空间
  * 禁止使用 malloc 等分配函数
  */

char _g_tms_tpdu[6];
int recvBuffer( char **pczBuffer, apr_size_t *ptLen )
{
   unsigned char aczLen[5];
   char aczBuffer[2048];
   int i;
   unsigned int iRecvLen=0;
   apr_size_t tLen = 2;
   unsigned char uCh=0;

   /*
    * <L1 L2> <TPDU> <6个字节的头> <N bytes of binary user data> 
    * len +tpdu + 数据 
    */

   memset( aczBuffer, 0, sizeof(aczBuffer) );
   memset( aczLen, 0, sizeof(aczLen) );
   apr_socket_timeout_set( pstClient, 2000000 );

   tLen = 2;
   if( apr_socket_recv( pstClient, aczLen, &tLen ) != APR_SUCCESS )
   {
       LOG4C(( LOG_FATAL, "接收请求报文长度出错[%s]\n", strerror(errno) ));
       return -1;
   }
   if( tLen != 2 )
   {
       LOG4C(( LOG_WARN, "接收请求报文长度出错\n" ));
       return -1;
   }

   memcpy( aczBuffer, aczLen, 2 );
   tLen = aczLen[0]*256+aczLen[1];
   LOG4C(( LOG_DEBUG, "接收长度 [%d] 内容 [%02x %02x]\n", tLen, aczLen[0], aczLen[1] ));

   if( tLen > *ptLen )
   {
      *pczBuffer = (char*)apr_palloc( gpstLocalPool, tLen+1 );
      LOG4C(( LOG_DEBUG, "APR_PALLOC again" ));
   }

   for (i=0; i<10; i++)
   {
      *ptLen = tLen-iRecvLen;

      if( apr_socket_recv( pstClient, aczBuffer+2+iRecvLen, ptLen ) != APR_SUCCESS )
      {
         LOG4C(( LOG_WARN, "1接收请求报文出错[%s]\n", strerror(errno) ));
         return -1;
      }
      iRecvLen+=*ptLen;
      LOG4C(( LOG_DEBUG, "iRecvLen[%d]", iRecvLen ));
      if( iRecvLen >= tLen ) 
      {
         break;
      }
   }
   if( i==10 )
   {
         LOG4C(( LOG_WARN, "2接收请求报文出错[%s]\n", strerror(errno) ));
         return -1;
   } 

   memcpy( _g_tms_tpdu, aczBuffer+2, 5 ); 
   *ptLen=tLen-5;/*扣除TPDU*/

   memcpy( *pczBuffer,  aczBuffer+2+5, *ptLen );

   LOG4C(( LOG_DEBUG, "接收包体长度 [%d] \n", *ptLen ));

   TOOL_Dump( LOG_DEBUG, "recv.dump", (unsigned char*)aczBuffer, tLen+2 );

   return *ptLen;
}

/**
  * 发送2字节长度再发送字符串
  */
int sendBuffer( char *pczBuffer, apr_size_t tSendLen )
{
   unsigned char aczLen[5];
   apr_size_t tLen = 2;
   apr_size_t tAcctLen=0;
   apr_size_t tTotalLen=0;
   char aczBuffer[8000];
   char aczTpdu[6];
   unsigned char uCh=0;
   int n;
   int  nSendLen=0;

   memset( aczBuffer, 0, sizeof(aczBuffer) );
   aczTpdu[0] = _g_tms_tpdu[0];
   aczTpdu[1] = _g_tms_tpdu[3];
   aczTpdu[2] = _g_tms_tpdu[4];
   aczTpdu[3] = _g_tms_tpdu[1];
   aczTpdu[4] = _g_tms_tpdu[2];

   nSendLen = tSendLen+5;
   aczLen[0] = (nSendLen)/256;
   aczLen[1] = (nSendLen)%256;

   memcpy( aczBuffer, aczLen, 2);
   memcpy( aczBuffer+2, aczTpdu, 5 );
   memcpy( aczBuffer+7, pczBuffer, tSendLen );

   tTotalLen = 2+nSendLen;
   do
   {
      tLen=tTotalLen-tAcctLen;

      if( apr_socket_send( pstClient, aczBuffer, &tLen ) != APR_SUCCESS )
      {
         LOG4C(( LOG_WARN, "1发送响应报文出错[%s]\n", strerror(errno) ));
         return -1;
      }
      tAcctLen+=tLen;
   } while( tAcctLen<tTotalLen );

   LOG4C(( LOG_DEBUG, "发送长度 [%d] \n", tAcctLen ));
   TOOL_Dump( LOG_DEBUG, "send.dump", (unsigned char*)aczBuffer, tAcctLen );

   return 0;
}

